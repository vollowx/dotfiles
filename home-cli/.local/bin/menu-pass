#!/usr/bin/env bash
set -Eeuo pipefail

fzf="${1:-fzf}"

die() {
  printf '%s\n' "$*" >&2
  exit 1
}

need fzf pass || exit 127

if [[ -z "${LAUNCHER_DEFER_WTYPE_FILE:-}" ]]; then
  need wtype || exit 127
fi

STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
[[ -d "$STORE_DIR" ]] || die "Password store not found: $STORE_DIR"

mapfile -t entries < <(
  find "$STORE_DIR" -type f -name '*.gpg' -printf '%P\n' 2>/dev/null |
    sed 's/\.gpg$//' |
    LC_ALL=C sort -f
)

out="$(printf '%s\n' "${entries[@]}" | $fzf --prompt 'pass> ' --print-query)" || true
[ -z "${out:-}" ] && exit 0

query="$(printf '%s' "$out" | sed -n '1p')"
selection="$(printf '%s' "$out" | sed -n '2p')"

exists() { [ -f "$STORE_DIR/${1}.gpg" ]; }

entry=""
if [ -n "$selection" ] && exists "$selection"; then
  entry="$selection"
elif [ -n "$query" ] && exists "$query"; then
  entry="$query"
else
  entry="${query:-$selection}"
fi
[ -z "$entry" ] && exit 0

if exists "$entry"; then
  password="$(pass show -- "$entry" | head -n1 || true)"
  [ -z "$password" ] && exit 1
else
  pass generate -n -- "$entry" 24 >/dev/null || die "Failed to generate: $entry"
  password="$(pass show -- "$entry" | head -n1)" || die "Failed to read generated password"
fi

sleep 0.10
printf '%s' "$password" | wtype -

unset password
